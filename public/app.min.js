'use strict';const bannerQueue=[],topBannerQueue=[];function addBanner(a,b){if(currentBanner!==a){for(const b of bannerQueue)if(a===b.text)return;bannerQueue.push({text:a,size:b})}}function addTopBanner(a,b){if(currentTopBanner!==a){for(const b of topBannerQueue)if(a===b.text)return;topBannerQueue.push({text:a,size:b})}}let currentTimer=0,currentBanner='',currentSize=20;const MAX_TIME=3;let currentTopTimer=0,currentTopBanner='',currentTopSize=80;const MAX_TOP_TIME=3;function drawBanner(a,b){var c=Math.max;if(0>=currentTimer&&0<bannerQueue.length){currentTimer=MAX_TIME;const a=bannerQueue.shift();currentBanner=a.text,currentSize=a.size}if(0<currentTimer)currentTimer-=b;else return void(currentBanner='');a.save(),2.5<currentTimer&&(a.globalAlpha=1-2*(currentTimer-2.5)),0.5>currentTimer&&(a.globalAlpha=c(0,2*currentTimer)),a.font=`${currentSize}px "Bungee", Arial, sans-serif`,a.textBaseline='middle',a.fillStyle='white',a.strokeStyle='black',a.lineWidth=c(1,currentSize/20),a.shadowOffsetX=c(1,currentSize/8),a.shadowOffsetY=c(1,currentSize/8);const d=a.measureText(currentBanner).width;a.fillText(currentBanner,a.canvas.width/4-d/2,a.canvas.height/4+100),a.strokeText(currentBanner,a.canvas.width/4-d/2,a.canvas.height/4+100),a.restore()}function drawTopBanner(a,b){var c=Math.max;if(0>=currentTopTimer&&0<topBannerQueue.length){currentTopTimer=MAX_TOP_TIME;const a=topBannerQueue.shift();currentTopBanner=a.text,currentTopSize=a.size}if(0<currentTopTimer)currentTopTimer-=b;else return void(currentTopBanner='');a.save(),2.5<currentTopTimer&&(a.globalAlpha=1-2*(currentTopTimer-2.5)),0.5>currentTopTimer&&(a.globalAlpha=c(0,2*currentTopTimer)),a.font=`${currentTopSize}px "Bungee", Arial, sans-serif`,a.textBaseline='middle',a.fillStyle='white',a.strokeStyle='black',a.lineWidth=c(1,currentTopSize/20),a.shadowOffsetX=c(1,currentTopSize/8),a.shadowOffsetY=c(1,currentTopSize/8);const d=a.measureText(currentTopBanner).width;a.fillText(currentTopBanner,a.canvas.width/4-d/2,a.canvas.height/4-100),a.strokeText(currentTopBanner,a.canvas.width/4-d/2,a.canvas.height/4-100),a.restore()}function err(){throw new Error('Something went wrong!')}function hsvToRgb(a,b,c){if(0===b)return[c,c,c];360<=a&&(a=0),a/=60;const d=Math.floor(a),e=a-d,f=c*(1-b),g=c*(1-b*e),h=c*(1-b*(1-e));switch(d){case 0:return[c,h,f];case 1:return[g,c,f];case 2:return[f,c,h];case 3:return[f,g,c];case 4:return[h,f,c];case 5:default:return[c,f,g];}}function clamp(a,b,c){return Math.max(b,Math.min(c,a))}const canvas=document.getElementById('canvas'),context=canvas.getContext('2d')||err();canvas.width=1920,canvas.height=1080;const targetAspect=canvas.width/canvas.height;context.scale(2,2);function resize(){const a=window.innerWidth/window.innerHeight;a>targetAspect?(canvas.style.height=window.innerHeight+'px',canvas.style.width=window.innerWidth*targetAspect/a+'px'):(canvas.style.width=window.innerWidth+'px',canvas.style.height=window.innerHeight*a/targetAspect+'px')}resize(),window.addEventListener('resize',resize),window.addEventListener('click',()=>{canvas.webkitRequestFullscreen()}),document.body.appendChild(canvas);var Key;(function(a){a[a.Space=32]='Space',a[a.Left=37]='Left',a[a.Up=38]='Up',a[a.Right=39]='Right',a[a.Down=40]='Down',a[a.One=49]='One',a[a.Two=50]='Two',a[a.A=65]='A',a[a.D=68]='D',a[a.P=80]='P',a[a.S=83]='S',a[a.W=87]='W'})(Key||(Key={}));const keystate={},controls={isPressed(a){return keystate[a]}};function keydown(a){keystate[a.keyCode]=!0,document.webkitFullscreenElement||canvas.webkitRequestFullscreen()}function keyup(a){keystate[a.keyCode]=!1}document.addEventListener('keydown',keydown),document.addEventListener('keyup',keyup);const v2={create(a=0,b=0){return[a,b]},set(a,b=0,c=0){a[0]=b,a[1]=c},clone(b,c){b[0]=c[0],b[1]=c[1]},isZero(b){return 0===b[0]&&0===b[1]},normalise(b,c){if(!v2.isZero(c)){const a=v2.length(c);b[0]=c[0]/a,b[1]=c[1]/a}},lengthSquared(b){return b[0]**2+b[1]**2},length(b){return Math.sqrt(v2.lengthSquared(b))},distanceSquared(c,a){return(c[0]-a[0])**2+(c[1]-a[1])**2},distance(c,a){return Math.sqrt(this.distanceSquared(c,a))},angle(b){return Math.atan2(b[1],b[0])},add(c,d,a){c[0]=d[0]+a[0],c[1]=d[1]+a[1]},sub(c,d,a){c[0]=d[0]-a[0],c[1]=d[1]-a[1]},mul(b,c,a){b[0]=c[0]*a,b[1]=c[1]*a},rotate(b,d,a){const e=Math.sin(a),f=Math.cos(a),c=d[0],g=d[1];b[0]=f*c-e*g,b[1]=e*c+f*g},invert(b,c){b[0]=-c[0],b[1]=-c[1]},dot(c,a){return c[0]*a[0]+c[1]*a[1]}},ao=v2.create(),ab=v2.create(),ac=v2.create();function update(a,b){const c=a[a.length-1],d=a.length;if(1===d)return b[0]=-c[0],b[1]=-c[1],!1;if(v2.invert(ao,c),v2.sub(ab,a[0],c),2===d)return b[0]=-ab[1],b[1]=ab[0],0>v2.dot(b,ao)&&(b[0]=-b[0],b[1]=-b[1]),!1;if(3===d){if(b[0]=-ab[1],b[1]=ab[0],0<v2.dot(b,a[1])&&(b[0]=-b[0],b[1]=-b[1]),0<v2.dot(b,ao)){a[1]=a[2];a.pop();return!1}return v2.sub(ac,a[1],c),b[0]=-ac[1],b[1]=ac[0],0<v2.dot(b,a[0])&&(b[0]=-b[0],b[1]=-b[1]),!(0<v2.dot(b,ao))||(a.shift(),!1)}return!1}const inverseDirection=v2.create();function combineSupport(a,b){return(c)=>{v2.invert(inverseDirection,c);const d=a(c),e=b(inverseDirection);return v2.sub(d,d,e),d}}function intersect(a,b){return intersection(combineSupport(a,b))}function intersection(b){for(const c=[],d=v2.create(1,0);;){const e=b(d);if(0>v2.dot(e,d))return!1;if(c.push(e),update(c,d))return!0}}var EntityType;(function(a){a[a.Player=0]='Player',a[a.Heart=1]='Heart',a[a.Mcguffin=2]='Mcguffin',a[a.Goblin=3]='Goblin',a[a.GoblinArcher=4]='GoblinArcher',a[a.Projectile=5]='Projectile',a[a.Exit=6]='Exit',a[a.Spikes=7]='Spikes',a[a.Grenade=8]='Grenade',a[a.Explosion=9]='Explosion',a[a.GrenadePickup=10]='GrenadePickup',a[a.Floater=11]='Floater'})(EntityType||(EntityType={}));const TILE_SIZE=32,tileColors=[],s=1,highV=0.8,lowV=0.5;for(let a=0;16>a;a++){const c=360/16*a,[d,e,f]=hsvToRgb(c,s,highV),[b,g,h]=hsvToRgb(c,s,lowV);tileColors[a]={dark:`rgb(${Math.floor(256*b)}, ${Math.floor(256*g)}, ${Math.floor(256*h)}`,light:`rgb(${Math.floor(256*d)}, ${Math.floor(256*e)}, ${Math.floor(256*f)}`}}class WorldMap{constructor(a){this.objectLayers=[],this.tileLayers=[],this.data=a;for(const b of a.layers)if('tilelayer'===b.type){const a=b;this.tileLayers.push(a),this.width=a.width,this.height=a.height;for(let b=0;b<a.data.length;b++)0!==a.data[b]&&(a.data[b]=b%15+1)}else if('objectgroup'===b.type){this.objectLayers.push(b)}}getTileIndex(a,b){return(this.height-b-1)*this.width+a}translateObjectPosition(a,b){return[a,this.height*TILE_SIZE+31-b]}willCollide(a,b,c){const d=a.collisionSupport.bind(a);return intersect(d,(a)=>{const d=v2.create(b*TILE_SIZE,c*TILE_SIZE);return 0<a[0]&&(d[0]+=TILE_SIZE),0<a[1]&&(d[1]+=TILE_SIZE),d})}findCollision(a){var b=Math.min,c=Math.floor,d=Math.max;const e=b(a.dP[0],0)+a.pos[0]-a.radius,f=b(a.dP[1],0)+a.pos[1]-a.radius,g=d(a.dP[0],0)+a.pos[0]+a.radius,h=d(a.dP[1],0)+a.pos[1]+a.radius,i=d(0,c(e/TILE_SIZE)),j=d(0,c(f/TILE_SIZE)),k=c(g/TILE_SIZE),l=c(h/TILE_SIZE),m=c(a.pos[0]/TILE_SIZE),n=c(a.pos[1]/TILE_SIZE),o=[0,0];let p=1;for(let c=j;c<=l&&c<this.height;c++)for(let e=i;e<=k&&e<this.width;e++)if(0!==this.tileLayers[0].data[this.getTileIndex(e,c)]&&this.willCollide(a,e,c)){const f=[0,0];let g=1;const h=e*TILE_SIZE,i=c*TILE_SIZE;if(i+TILE_SIZE<a.pos[1]){if(f[1]=1,0>a.dP[1]){const d=(c+1)*TILE_SIZE-(a.pos[1]-a.radius);g=b(d/a.dP[1],g)}}else if(i>a.pos[1]){if(f[1]=-1,0<a.dP[1]){const d=c*TILE_SIZE-(a.pos[1]+a.radius);g=b(d/a.dP[1],g)}}else if(h+TILE_SIZE<a.pos[0]){if(f[0]=1,0>a.dP[0]){const c=(e+1)*TILE_SIZE-(a.pos[0]-a.radius);g=b(c/a.dP[0],g)}}else if(h>a.pos[0]&&(f[0]=-1,0<a.dP[0])){const c=e*TILE_SIZE-(a.pos[0]+a.radius);g=b(c/a.dP[0],g)}g<=p&&(p=d(g,0),v2.clone(o,f))}return v2.normalise(o,o),{time:p,normal:o}}draw(a){for(let b=0;b<this.height;b++)for(let c=0;c<this.width;c++){const d=this.tileLayers[0].data[this.getTileIndex(c,b)];0!==d&&(a.fillStyle=tileColors[d].light,a.fillRect(c*TILE_SIZE,b*TILE_SIZE,TILE_SIZE,TILE_SIZE),a.fillStyle=tileColors[d].dark,a.beginPath(),a.moveTo(c*TILE_SIZE,b*TILE_SIZE),a.lineTo((1+c)*TILE_SIZE,b*TILE_SIZE),a.lineTo((1+c)*TILE_SIZE,(1+b)*TILE_SIZE),a.closePath(),a.fill())}}}const levelFiles=['level1.json','level2.json','level3.json','level4.json'],levels=[],levelsLoaded=Promise.all(levelFiles.map(loadLevel));function getLevel(a){return levels[a%levels.length]}async function loadLevel(a,b){const c=await fetch(`levels/${a}`),d=await c.json(),e=new WorldMap(d),f=new Level(e);levels[b]=f}var MapObjectType;(function(a){a[a.Spawn=65]='Spawn',a[a.Exit=66]='Exit',a[a.Creature1=97]='Creature1',a[a.Creature2=98]='Creature2',a[a.Creature3=99]='Creature3',a[a.GrenadePickup=100]='GrenadePickup',a[a.Mcguffin=129]='Mcguffin',a[a.Heart=130]='Heart',a[a.Spikes=131]='Spikes'})(MapObjectType||(MapObjectType={}));const ObjectToEntityMap={[MapObjectType.Exit]:EntityType.Exit,[MapObjectType.Creature1]:EntityType.Goblin,[MapObjectType.Creature2]:EntityType.GoblinArcher,[MapObjectType.Creature3]:EntityType.Floater,[MapObjectType.Heart]:EntityType.Heart,[MapObjectType.Mcguffin]:EntityType.Mcguffin,[MapObjectType.Spikes]:EntityType.Spikes,[MapObjectType.GrenadePickup]:EntityType.GrenadePickup};class Level{constructor(a){this.map=a,this.spawn=v2.create(),this.mcguffinCount=0;for(const b of a.objectLayers)for(const c of b.objects){const b=c.gid;b===MapObjectType.Spawn&&v2.clone(this.spawn,a.translateObjectPosition(c.x,c.y)),b===MapObjectType.Mcguffin&&this.mcguffinCount++}}getEntities(){const a=[];for(const b of this.map.objectLayers)for(const c of b.objects){const b=c.gid;ObjectToEntityMap[b]&&a.push(new Entity(ObjectToEntityMap[b],this.map.translateObjectPosition(c.x,c.y)))}return a}}var WeaponType;(function(a){a[a.Gun=0]='Gun',a[a.Grenade=1]='Grenade'})(WeaponType||(WeaponType={}));const entities=new Set;let player,level,paused=!1;const weaponsAvailable=[WeaponType.Gun],debuffs={doubleDamage:!1,fastMonsters:!1,noHeal:!1,slowRegen:!1,undead:!1};let currentLevelId=0;function reset(){player=new Entity(EntityType.Player,[20,20]),changeLevel(currentLevelId)}function togglePause(){paused=!paused}function nextLevel(){changeLevel(currentLevelId+1)}function addDebuff(){const a=[];debuffs.doubleDamage||a.push('doubleDamage'),debuffs.noHeal||a.push('noHeal'),debuffs.fastMonsters||a.push('fastMonsters'),debuffs.slowRegen||a.push('slowRegen'),debuffs.undead||a.push('undead');const b=Math.floor(Math.random()*a.length);switch(a[b]){case'doubleDamage':{debuffs.doubleDamage=!0,addBanner('Curse: Enemy Damage X2',50);break}case'fastMonsters':{debuffs.fastMonsters=!0,addBanner('Curse: Fast enemies',50);break}case'noHeal':{debuffs.noHeal=!0,addBanner('Curse: No healing',50);break}case'slowRegen':{debuffs.slowRegen=!0,addBanner('Curse: Ammo regen 50%',50);break}case'undead':{debuffs.undead=!0,addBanner(`Curse: Enemies don't stay dead`,45);break}}}function changeLevel(a){addTopBanner(`Level ${a+1}`,80),0===a&&(addBanner('A,  D to move',30),addBanner('Space to jump',30),addBanner('Arrow keys shoot',30),addBanner('Collect cursed lava lamps to open the door',30),addBanner('Lava lamp curses last the rest of the level',30),addBanner('(or until you die!)',30)),debuffs.doubleDamage=!1,debuffs.fastMonsters=!1,debuffs.noHeal=!1,debuffs.slowRegen=!1,debuffs.undead=!1,currentLevelId=a,level=getLevel(a),entities.clear(),v2.clone(player.pos,level.spawn),player.mcguffins=[];const b=level.getEntities();entities.add(player);for(const c of b)entities.add(c)}const spritesheet=new Image,spritesLoaded=new Promise((a,b)=>{spritesheet.onload=a,spritesheet.onerror=b});spritesheet.src='assets/sprites.png';function getCanvas(a,b){const c=document.createElement('canvas');c.width=a,c.height=b;const d=c.getContext('2d')||err();return[c,d]}function makeGoblinGraphic(a){const[b,c]=getCanvas(20,20);return c.translate(10,10),c.fillStyle=a,c.strokeStyle='white',c.beginPath(),c.arc(0,0,8,0,2*Math.PI,!1),c.fill(),c.stroke(),c.fillRect(8,-4,2,8),b}function makePlayerGraphic(){const[a,b]=getCanvas(16,16);return b.fillStyle='purple',b.strokeStyle='white',b.fillRect(0,0,16,16),b.strokeRect(0,0,16,16),a}function makeFallbackGraphic(){const[a,b]=getCanvas(32,32);return b.fillStyle='blue',b.fillRect(0,0,32,32),b.strokeStyle='white',b.beginPath(),b.moveTo(0,0),b.lineTo(31,31),b.moveTo(0,31),b.lineTo(31,0),b.stroke(),a}function makeProjectileGraphic(){const[a,b]=getCanvas(10,10);return b.fillStyle='yellow',b.strokeStyle='black',b.beginPath(),b.arc(4,4,4,0,2*Math.PI,!1),b.fill(),b.stroke(),a}function makeGrenadeGraphic(){const[a,b]=getCanvas(16,16);return b.fillStyle='black',b.strokeStyle='black',b.beginPath(),b.arc(8,8,8,0,2*Math.PI,!1),b.fill(),b.beginPath(),b.moveTo(8,8),b.lineTo(16,16),b.stroke(),b.strokeStyle='yellow',b.beginPath(),b.moveTo(15,15),b.lineTo(16,16),b.stroke(),a}function makeHeartGraphic(){const[a,b]=getCanvas(32,32);return spritesLoaded.then(()=>{b.translate(0,32),b.scale(1,-1),b.drawImage(spritesheet,32*1,32*4,32,32,0,0,32,32)}),a}function makeMcguffinGraphic(){const[a,b]=getCanvas(32,32);return spritesLoaded.then(()=>{b.translate(0,32),b.scale(1,-1),b.drawImage(spritesheet,32*0,32*4,32,32,0,0,32,32)}),a}function makeExitGraphic(){const[a,b]=getCanvas(32,32);return spritesLoaded.then(()=>{b.translate(0,32),b.scale(1,-1),b.drawImage(spritesheet,32*1,32*2,32,32,0,0,32,32)}),a}function makeSpikesGraphic(){const[a,b]=getCanvas(32,32);return spritesLoaded.then(()=>{b.translate(0,32),b.scale(1,-1),b.drawImage(spritesheet,32*2,32*4,32,32,0,0,32,32)}),a}function makeFloaterGraphic(){const[a,b]=getCanvas(32,32);return spritesLoaded.then(()=>{b.translate(0,32),b.scale(1,-1),b.drawImage(spritesheet,32*0,32*3,32,32,0,0,32,32)}),a}function makeGunIconGraphic(){const[a,b]=getCanvas(32,32);return spritesLoaded.then(()=>{b.drawImage(spritesheet,32*3,32*4,32,32,0,0,32,32)}),a}function makeBombIconGraphic(){const[a,b]=getCanvas(32,32);return spritesLoaded.then(()=>{b.drawImage(spritesheet,32*3,32*3,32,32,0,0,32,32)}),a}const playerGraphic=makePlayerGraphic(),fallbackGraphic=makeFallbackGraphic(),goblinGraphic=makeGoblinGraphic('orange'),goblinArcherGraphic=makeGoblinGraphic('red'),heartGraphic=makeHeartGraphic(),mcguffinGraphic=makeMcguffinGraphic(),projectileGraphic=makeProjectileGraphic(),exitGraphic=makeExitGraphic(),spikesGraphic=makeSpikesGraphic(),grenadeGraphic=makeGrenadeGraphic(),gunIconGraphic=makeGunIconGraphic(),bombIconGraphic=makeBombIconGraphic(),floaterGraphic=makeFloaterGraphic(),images=['sprites.png'],music=[],other=['click.wav','click2.wav','explosion1.wav','pop.wav','squelch1.wav','urgh.wav','whoop.wav'],loaded=new Map;function makeURL(a){return`assets/${a}`}let pending=0;const assetsLoaded=new Promise((a)=>{const b=(b,c)=>{pending--,loaded.set(b,c),0==pending&&a()},c=(b,c)=>{pending--,console.log(`Couldn't load ${b}: ${c}`),0==pending&&a()};for(const d of images){pending++;const a=new Image;a.src=makeURL(d),a.onload=()=>b(d,a),a.onerror=(a)=>c(d,a.error)}for(const d of music){pending++;const a=document.createElement('audio');a.src=makeURL(d),a.oncanplay=()=>b(d,a),a.onerror=(a)=>c(d,a.error)}for(const d of other)pending++,fetch(makeURL(d)).then((a)=>a.arrayBuffer()).then((a)=>b(d,a)).catch((a)=>c(d,a))});function getAsset(a){return loaded.get(a)}const soundAssets=['click','click2','explosion1','pop','squelch1','urgh','whoop'],sounds=new Map,context$1=new AudioContext,soundGainNode=context$1.createGain(),musicGainNode=context$1.createGain();soundGainNode.connect(context$1.destination),musicGainNode.connect(context$1.destination),assetsLoaded.then(()=>{for(const a of soundAssets){const b=getAsset(`${a}.wav`);context$1.decodeAudioData(b,(b)=>{sounds.set(a,b)})}});class SoundManager{get musicVolume(){return musicGainNode.gain.value}set musicVolume(a){a=clamp(a,0,1),musicGainNode.gain.value=a}get soundVolume(){return soundGainNode.gain.value}set soundVolume(a){a=clamp(a,0,1),soundGainNode.gain.value=a}play(a){if(sounds.has(a)){const b=context$1.createBufferSource();b.buffer=sounds.get(a),b.connect(soundGainNode),b.start()}}connectMusic(a){const b=context$1.createMediaElementSource(a);b.connect(musicGainNode)}}var sound=new SoundManager;const g=[0,-980];var Faction;(function(a){a[a.Foe=0]='Foe',a[a.Friend=1]='Friend',a[a.Neither=2]='Neither'})(Faction||(Faction={}));var Facing;(function(a){a[a.Left=0]='Left',a[a.Right=1]='Right',a[a.Up=2]='Up',a[a.Down=3]='Down'})(Facing||(Facing={}));var CollisionResponse;(function(a){a[a.Bounce=0]='Bounce',a[a.Stop=1]='Stop',a[a.Deflect=2]='Deflect',a[a.TurnAround=3]='TurnAround'})(CollisionResponse||(CollisionResponse={}));class Entity{constructor(a,b,c={}){switch(this.pos=v2.create(),this.dP=v2.create(),this.v=v2.create(),this.dV=v2.create(),this.facing=Facing.Right,this.collidable=!0,this.killable=!1,this.controlled=!1,this.limitedLife=!1,this.harmful=!1,this.flying=!1,this.onGround=!1,this.pacer=!1,this.destroyOnUse=!1,this.collectable=!1,this.undead=!1,this.explodes=!1,this.isExplosion=!1,this.floater=!1,this.collisionResponse=CollisionResponse.Deflect,this.health=0,this.maxHealth=100,this.speed=1e3,this.lifespan=0,this.damage=0,this.faction=Faction.Foe,this.weaponTimer=0,this.weaponRange=200,this.radius=8,this.target=null,this.mcguffins=[],this.cooldown=0,this.ammo=0,this.ammoMax=0,this.ammoRegen=1,this.ammoTimer=0,this.weaponType=WeaponType.Gun,this.explosionTimer=0,this.graphic=fallbackGraphic,v2.clone(this.pos,b),a){case EntityType.Player:{this.controlled=!0,this.killable=!0,this.maxHealth=100,this.graphic=playerGraphic,this.speed=2e3,this.faction=Faction.Friend,this.ammoMax=50,this.ammo=50;break}case EntityType.Floater:{this.killable=!0,this.maxHealth=10,this.health=10,this.graphic=floaterGraphic,this.speed=500,this.radius=8,this.harmful=!0,this.damage=100,this.flying=!0,this.floater=!0,this.collisionResponse=CollisionResponse.Bounce,this.target=player;break}case EntityType.GrenadePickup:{this.graphic=bombIconGraphic,this.faction=Faction.Friend,this.radius=16,this.onhit=()=>{weaponsAvailable.push(WeaponType.Grenade),addBanner('New Weapon: Grenades',40),this.die()};break}case EntityType.Goblin:{this.killable=!0,this.maxHealth=20,this.graphic=goblinGraphic,this.speed=1e3,this.pacer=!0,this.harmful=!0,this.damage=100,this.collisionResponse=CollisionResponse.TurnAround;break}case EntityType.GoblinArcher:{this.killable=!0,this.maxHealth=40,this.graphic=goblinArcherGraphic,this.speed=1e3,this.pacer=!0,this.harmful=!0,this.damage=100,this.collisionResponse=CollisionResponse.TurnAround,this.target=player,this.ammo=100,this.ammoMax=100,this.ammoRegen=0.1;break}case EntityType.Spikes:{this.graphic=spikesGraphic,this.harmful=!0,this.damage=100,this.flying=!0;break}case EntityType.Projectile:{switch(this.graphic=projectileGraphic,this.faction=c.faction||Faction.Foe,this.facing=c.facing||Facing.Left,this.facing){case Facing.Left:{v2.set(this.v,-1e3,0);break}case Facing.Right:{v2.set(this.v,1e3,0);break}case Facing.Up:{v2.set(this.v,0,1e3);break}case Facing.Down:{v2.set(this.v,0,-1e3);break}}this.radius=4,this.limitedLife=!0,this.lifespan=2,this.harmful=!0,this.damage=10,this.flying=!0,this.destroyOnUse=!0;break}case EntityType.Heart:{this.graphic=heartGraphic,this.faction=Faction.Friend,this.radius=16,this.collectable=!0,this.health=30;break}case EntityType.Grenade:{switch(this.graphic=grenadeGraphic,this.radius=8,this.faction=c.faction||Faction.Foe,this.explosionTimer=2,this.explodes=!0,this.facing=c.facing||Facing.Left,this.facing){case Facing.Left:{v2.set(this.v,-400,300);break}case Facing.Right:{v2.set(this.v,400,300);break}case Facing.Up:{v2.set(this.v,0,500);break}case Facing.Down:{v2.set(this.v,0,-500);break}}break}case EntityType.Explosion:{this.radius=0,this.damage=100,this.faction=Faction.Neither,this.harmful=!0,this.isExplosion=!0,this.flying=!0,this.limitedLife=!0,this.lifespan=1;break}case EntityType.Exit:{this.graphic=exitGraphic,this.faction=Faction.Friend,this.radius=16,this.flying=!0,this.onhit=()=>{level.mcguffinCount===player.mcguffins.length?nextLevel():0===this.cooldown&&(addBanner('Collect more Lava Lamps',20),sound.play('click2'),this.cooldown+=0.5)};break}case EntityType.Mcguffin:{this.graphic=mcguffinGraphic,this.faction=Faction.Friend,this.radius=16,this.onhit=(a)=>{a.mcguffins.push({}),addDebuff(),sound.play('click'),this.die()};break}}this.killable&&(this.health=this.maxHealth)}update(a){var b=Math.max;if(v2.set(this.dV,0,0),0<this.weaponTimer&&(this.weaponTimer=b(0,this.weaponTimer-a)),0<this.cooldown&&(this.cooldown=b(0,this.cooldown-a)),this.limitedLife&&(this.lifespan-=a),0>this.lifespan)return this.die();if(0>=this.health&&this.killable)if(debuffs.undead&&this!==player)this.undead=!0,this.speed=0,this.health=10;else return this.die();if(this.explodes&&(this.explosionTimer-=a,0>this.explosionTimer&&(entities.add(new Entity(EntityType.Explosion,this.pos)),this.die())),this.isExplosion&&(this.radius=50*Math.pow(1-this.lifespan,0.5)),this.undead&&1e3>this.speed&&(this.speed+=100*a),this.ammo===this.ammoMax?this.ammoTimer=b(0,this.ammoTimer):0<this.ammoTimer&&(this.ammoTimer-=a),this.ammo<this.ammoMax&&0>=this.ammoTimer&&(this.ammo++,this.ammoTimer+=this.ammoRegen,debuffs.slowRegen&&(this.ammoTimer+=this.ammoRegen)),this.controlled)this.playerControl(a);else if(this.pacer&&(this.dV[0]=this.facing===Facing.Left?-1:1),this.target){const a=v2.create();v2.sub(a,this.target.pos,this.pos);v2.angle(a);this.facing=this.target.pos[0]<this.pos[0]?Facing.Left:Facing.Right,!this.floater&&this.weaponRange>=v2.length(a)&&this.shoot(this.facing),v2.normalise(a,a),this.floater&&(v2.add(a,a,[0.1*Math.random(),0.1*Math.random()]),v2.normalise(a,a),300<v2.distance(this.pos,player.pos)&&v2.mul(a,a,0.05)),v2.clone(this.dV,a)}v2.mul(this.dV,this.dV,this.speed),debuffs.fastMonsters&&this.faction===Faction.Foe&&v2.mul(this.dV,this.dV,2),this.undead&&v2.mul(this.dV,this.dV,0.5),this.onGround||this.flying||v2.mul(this.dV,this.dV,0.2);const c=v2.create();v2.mul(c,this.v,this.onGround?-12:-1),v2.add(this.dV,this.dV,c),this.flying||v2.add(this.dV,this.dV,g),v2.mul(this.dV,this.dV,a),v2.add(this.v,this.dV,this.v);const d=v2.create();if(v2.mul(d,this.v,a),v2.mul(this.dP,this.dV,0.5*a),v2.add(this.dP,d,this.dP),this.onGround=!1,this.collidable)for(let b=4;b--;){const c=level.map.findCollision(this);1>c.time&&!v2.isZero(c.normal)&&(0.5<c.normal[1]&&(this.onGround=!0),0==b?(v2.set(this.dP,0,0),console.log('Too many collisions, giving up')):this.updateMove(c.normal,c.time),this.hit(null,a))}for(const b of entities)b!==this&&b.collidable&&this.willCollide(b)&&(this.hit(b,a),b.hit(this,a));0!==this.v[0]&&(this.facing=0>this.v[0]?Facing.Left:Facing.Right),v2.add(this.pos,this.pos,this.dP)}shoot(a){0===this.weaponTimer&&0<this.ammo&&(this.weaponType===WeaponType.Gun?(entities.add(new Entity(EntityType.Projectile,this.pos,{facing:a,faction:this.faction})),this.ammo--):this.weaponType===WeaponType.Grenade&&(entities.add(new Entity(EntityType.Grenade,this.pos,{facing:a,faction:this.faction})),this.ammo-=10),sound.play('pop'),this.weaponTimer+=0.1)}playerControl(){v2.set(this.dV,0,0),controls.isPressed(Key.Space)&&this.onGround&&(this.v[1]+=600,sound.play('whoop')),controls.isPressed(Key.A)&&(this.dV[0]=-1),controls.isPressed(Key.D)&&(this.dV[0]=1),controls.isPressed(Key.Up)&&this.shoot(Facing.Up),controls.isPressed(Key.Down)&&this.shoot(Facing.Down),controls.isPressed(Key.Left)&&this.shoot(Facing.Left),controls.isPressed(Key.Right)&&this.shoot(Facing.Right),weaponsAvailable.includes(WeaponType.Gun)&&controls.isPressed(Key.One)&&(this.weaponType=WeaponType.Gun),weaponsAvailable.includes(WeaponType.Grenade)&&controls.isPressed(Key.Two)&&(this.weaponType=WeaponType.Grenade),v2.normalise(this.dV,this.dV)}collisionSupport(a){const b=v2.create();if(v2.normalise(a,a),v2.mul(b,a,this.radius),v2.add(b,this.pos,b),!v2.isZero(this.dP)){const c=v2.dot(this.dP,a);0<c&&v2.add(b,b,this.dP)}return b}willCollide(a){const b=this.collisionSupport;return intersect(b.bind(this),b.bind(a))}updateMove(a,b){let c=1-b;switch(this.collisionResponse===CollisionResponse.Bounce&&(c+=0.9),this.collisionResponse){case CollisionResponse.TurnAround:0!==this.dP[0]&&(this.facing=this.facing===Facing.Left?Facing.Right:Facing.Left);case CollisionResponse.Bounce:case CollisionResponse.Deflect:{const b=v2.create(),d=v2.create();v2.mul(d,a,c*v2.dot(this.dP,a)),v2.sub(this.dP,this.dP,d),v2.mul(b,a,c*v2.dot(this.v,a)),v2.sub(this.v,this.v,b);break}case CollisionResponse.Stop:{v2.set(this.dP,0,0),v2.set(this.v,0,0);break}}}hit(a){if(!a)return void(this.harmful&&this.destroyOnUse&&this.die());if(this.onhit&&a===player&&this.onhit(a),this.killable&&a.harmful&&this.faction!==a.faction){let b=a.damage;this===player&&debuffs.doubleDamage&&(b*=2),a.destroyOnUse?(this.health-=b,sound.play('urgh'),a.die()):0===a.cooldown&&(this.health-=0.25*b,a.cooldown+=0.25,sound.play('urgh'))}return this.collectable&&this.faction===a.faction&&0<this.health&&a.health<a.maxHealth?(debuffs.noHeal||(a.health=Math.min(a.maxHealth,a.health+this.health)),this.die()):void 0}die(){entities.delete(this),this.killable&&sound.play('squelch1'),this===player&&reset()}}let lastFrameStart=0,pauseHeld=!1;function loop(){0==lastFrameStart&&(lastFrameStart=performance.now());const a=performance.now(),b=Math.min((a-lastFrameStart)/1e3,0.2);if(lastFrameStart=a,controls.isPressed(Key.P)?(!pauseHeld&&togglePause(),pauseHeld=!0):pauseHeld=!1,!paused){for(const a of entities)a.update(b);0>player.pos[1]&&player.die()}context.save(),context.fillStyle='rgb(48, 48, 128)',context.fillRect(0,0,canvas.width,canvas.height),context.translate(canvas.width/4,canvas.height/4),context.scale(1,-1),context.translate(-player.pos[0],-player.pos[1]),level.map.draw(context);for(const a of entities)context.save(),context.translate(a.pos[0],a.pos[1]),a.killable&&a.health<a.maxHealth&&a!==player&&(context.fillStyle='red',context.fillRect(-12,a.radius+4,24*(a.health/a.maxHealth),5)),a.facing===Facing.Left&&context.scale(-1,1),a.isExplosion?(context.fillStyle='yellow',context.beginPath(),context.arc(0,0,a.radius,0,2*Math.PI),context.fill()):context.drawImage(a.graphic,-a.graphic.width/2,-a.graphic.height/2),context.restore();context.restore(),drawTopBanner(context,b),drawBanner(context,b),drawGUI(),requestAnimationFrame(loop)}const healthGradient=context.createLinearGradient(0,0,100,20);healthGradient.addColorStop(0,'rgb(128, 0, 0)'),healthGradient.addColorStop(1,'rgb(255, 55, 55)');function drawGUI(){context.strokeStyle='white',context.fillStyle=healthGradient,context.fillRect(15,15,100*player.health/player.maxHealth,20),context.strokeRect(15,15,100,20),context.font='20px "Fredoka One", Arial, sans-serif',context.fillStyle='white',context.strokeStyle='black',context.textBaseline='top',context.fillText(player.ammo+'',130,15),context.strokeText(player.ammo+'',130,15);let a=0;weaponsAvailable.includes(WeaponType.Gun)&&(context.fillText('1',20,56+50*a),context.drawImage(gunIconGraphic,45,50+50*a),player.weaponType===WeaponType.Gun&&(context.strokeStyle='white',context.strokeRect(15,45+50*a,67,42)),a++),weaponsAvailable.includes(WeaponType.Grenade)&&(context.fillText('2',20,56+50*a),context.drawImage(bombIconGraphic,45,50+50*a),player.weaponType===WeaponType.Grenade&&(context.strokeStyle='white',context.strokeRect(15,45+50*a,67,42)),a++)}function init(){reset(),requestAnimationFrame(loop)}const loadingImage=new Image;loadingImage.src='assets/loading.png',loadingImage.onload=()=>{context.drawImage(loadingImage,0,0,canvas.width/2,canvas.height/2),setTimeout(()=>{Promise.all([levelsLoaded,spritesLoaded]).then(init)},3e3)};
//# sourceMappingURL=app.min.js.map
